package game;

import game.Player.Direction;
import gui.GameFrame;

import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.InputStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

import util.ImageLibrary;
import datastorage.StoreData;

/**
<<<<<<< .working
 * Class that represents the world. Contains a 2d array of gameobjects, in which
 * could represent keys, doors etc. This class populates the world and is
 * responsible for redrawing it.
 *
=======
 * Class that represents the world. Contains a 2d array of gameobjects,
 * in which could represent keys, doors etc. This class populates the world
 * and is responsible for redrawing it.
 *
>>>>>>> .merge-right.r91
 * @author Hai Tran
 *
 */
<<<<<<< .working
public class World implements Serializable {
	/**
	 *
	 */
	private static final long serialVersionUID = 1L;
	public static final int mapSize = 70;
=======
public class World{
	private int mapSize = 70;
>>>>>>> .merge-right.r91
	// Map containing all the tiles, which represent the world
	private Tile[][] map = new Tile[mapSize][mapSize];

<<<<<<< .working
	// The top left tile in the screen, so only the tiles on the screen are
	// drawn.
=======
	// the top left tile in the screen, so only the tiles on the screen are drawn.
>>>>>>> .merge-right.r91
	private int xPos;
	private int yPos;
	private Direction direction;
	private double transition;

	//Players in the game
	private Map<Integer,Player> players = new HashMap<Integer,Player>();

	//Player position
	private int playerRow;
	private int playerCol;

	// Shows how many tiles away from center of screen (For offset of player)
	private int middleRow = (GameFrame.screenWidth / Tile.tileSize/2);
	private int middleCol = (GameFrame.screenHeight / Tile.tileSize/2);
	private int screenOffset = 20;		//Need this to draw correctly, because middle of screen doesn't line up with tile.

	// Item names
	public static final String grass = "grass";
	public static final String flower = "flower";
	public static final String tree = "tree";
	public static final String floor = "floor";
	public static final String door = "door";
	public static final String water = "water";
	public static final String key = "key";
	public static final String wall = "wall";

	/*public void fromByteArray(byte[] array) throws IOException {
		ByteArrayInputStream bin = new ByteArrayInputStream(array);
		DataInputStream din = new DataInputStream(bin);

		int ncharacters = din.readInt();
		players.clear();
		for(int i=0;i!=ncharacters;++i) {
			players.add(Player.fromInputStream(din));
		}
	}*/

	public World(){
		setUpWorld();
	}


	public World(String file) {
		// TODO Auto-generated constructor stub
	}

	/*public byte[] toByteArray() throws IOException {
		ByteArrayOutputStream bout = new ByteArrayOutputStream();
		DataOutputStream dout = new DataOutputStream(bout);

		dout.writeInt(players.size());
		for(Player p : players) {
			p.toOutputStream(dout);
		}

		dout.flush();

		// Finally, return!!
		return bout.toByteArray();
	}*/



	/**
	 * Sets up the World and all the components in it, such as doors, rooms etc...
	 */
	public void setUpWorld(){
		transition = 0.0;
		Scanner scan;

		InputStream file = ClassLoader.getSystemResourceAsStream("Assets/Data/file.txt");
		scan = new Scanner(file);

		for (int i =0; i < map.length; i++){
			char[] next = scan.next().toCharArray();
			for (int j =0; j < map[0].length; j++){
				String img = "";
				String name = "";
				char current = next[j];
<<<<<<< .working
				if (current == 'x'){
					img = "sprites/tree.png";
					name = tree;}
				if (current == '-'){
					img = "sprites/grass.png";
					name = grass;}
				if (current == 'y'){
					img = "sprites/flower.png";
					name = flower;}
				if (current == 'w'){
					img = "sprites/water.png";
					name = water;}
				if (current == 'l'){
					img = "sprites/wall.png";
					name = wall;}
				if (current == 'k'){
					img = "sprites/key.png";
					name = key;}
				if (current == 'd'){
					img = "sprites/door.png";
					name = door;}
				if (current == 'f'){
					img = "sprites/floor.png";
=======
				if(current == 'x')img = "sprites/tree.png";
				if(current == '-')img = "sprites/grass.png";
				if(current == 'y')img = "sprites/flower.png";
				if(current == 'w')img = "sprites/water.png";
				if(current == 'l')img = "sprites/wall.png";
				if(current == 'k')img = "sprites/key.png";
				if(current == 'd')img = "sprites/door.png";
				if(current == 'f')img = "sprites/floor.png";
>>>>>>> .merge-right.r91
					name = floor;}

<<<<<<< .working
				map[i][j] = new Tile(new EnvironmentObject(img, name), i, j);
=======
				map[i][j] = new Tile(new EnvironmentObject(img,null), i, j);
>>>>>>> .merge-right.r91
			}
		}
		scan.close();
<<<<<<< .working
	}

	/**
	 * Sets the Fields needed for players position
	 * according to where the player is in the array
	 *
	 * sets: playerRow and playerCol
	 */
	public void setPlayerPositionFields(){
		if (players.size() > 0) {
			playerRow = players.get(0).getX();
			playerCol = players.get(0).getY();
		}
	}
=======
>>>>>>> .merge-right.r91

<<<<<<< .working

	public void redraw(Graphics g) {
		// the size of the "game window"
=======

		//Add Players into world
		int pos = 30;
		players.add(new Player("sprites/slimes/slime.png", "sprites/slimes/slime.png", false, new Tile(null, pos, pos)));
		map[pos][pos] = new Tile(players.get(0),pos,pos);
		//into specific row and col in world
	}


	public void redraw(Graphics g){
		//the size of the "game window"
>>>>>>> .merge-right.r91
		int screenWidth = mapSize;
		int screenHeight = mapSize;

<<<<<<< .working
		// Get players position in array (PLAYER 1)
		setPlayerPositionFields();
=======
		//FOR CENTER OF SCREEN (offsets from player position)
		int middleRow = (GameFrame.screenWidth/Tile.tileSize/2);
		int middleCol = (GameFrame.screenHeight/Tile.tileSize/2);
		
		//Get players position in array (PLAYER 1)
		if (players.get(0).getPos() != null){
			playerRow = players.get(0).getPos().getRow();
			playerCol = players.get(0).getPos().getCol();
		}
>>>>>>> .merge-right.r91
		
		int startRow = playerRow - middleRow;
		int startCol = playerCol- middleCol; 
		int endRow = playerRow + middleRow;
		int endCol = playerCol + middleCol;
<<<<<<< .working
		// BOUNDS CHECK - when map is made bigger


		// System.out.println("endRow" + endRow + " endCol:" + endCol);

		// Draws the map relative to the player (Player in center)
		for (int i = 0; i < screenWidth; i++) {
			for (int j = 0; j < screenHeight; j++) {
=======
		//BOUNDS CHECK - when map is made bigger
		
		//System.out.println("endRow" + endRow + " endCol:" + endCol);
		
		//Draws the map relative to the player (Player in center)
		for (int i = 0; i < screenWidth; i++){
			for (int j = 0; j < screenHeight; j++){
>>>>>>> .merge-right.r91
				Tile tile = map[i][j];
				BufferedImage image = ImageLibrary.get(tile.getItem().getImage());
				//int offset = 0;//image.getHeight() - Tile.tileSize;
<<<<<<< .working
				// Translates it onto screen and draws so that drawing is
				//Relative to player (player is in middle)

				g.drawImage(image, tile.getPoint().x
						- (startRow * Tile.tileSize), tile.getPoint().y - (startCol * Tile.tileSize),
=======
				//Translates it onto screen and draws so that drawing is Relative to player (player is in middle)
				g.drawImage(image, tile.getPoint().x - (startRow*Tile.tileSize), tile.getPoint().y - offset - (startCol*Tile.tileSize),
>>>>>>> .merge-right.r91
						image.getWidth(), image.getHeight(), null);

				if(players.size() > 0 && playerRow == i && playerCol == j){
					players.get(0).draw(g);
				}
			}
		}
<<<<<<< .working
=======


		/*	for (int i = xPos; i < screenWidth; i++){
			for (int j = yPos; j < screenHeight; j++){
				//Draws all the tiles on the screen
				if(i < map.length && j < map.length){
					Tile tile = map[i][j];
					BufferedImage image = ImageLibrary.get(tile.getItem().getImage());
					int offset = image.getHeight() - Tile.tileSize;
					int transOffset = (int)(transition * Tile.tileSize);
					// increment correct values from transition
					if(transition == 0.0){
						g.drawImage(image, tile.getPoint().x, tile.getPoint().y - offset, image.getWidth(), image.getHeight(), null);
					} else if(direction == Direction.UP){
						g.drawImage(image, tile.getPoint().x, tile.getPoint().y - offset - transOffset, image.getWidth(), image.getHeight(), null);
						transition -= 0.5;
					} else if(direction == Direction.DOWN){
						g.drawImage(image, tile.getPoint().x, tile.getPoint().y - offset + transOffset, image.getWidth(), image.getHeight(), null);
						transition -= 0.5;
					} else if(direction == Direction.LEFT){
						g.drawImage(image, tile.getPoint().x + transOffset, tile.getPoint().y - offset, image.getWidth(), image.getHeight(), null);
						transition -= 0.5;
					} else if(direction == Direction.RIGHT){
						g.drawImage(image, tile.getPoint().x - transOffset, tile.getPoint().y - offset, image.getWidth(), image.getHeight(), null);
						transition -= 0.5;
					}
				} else {
					//TODO draw black where the map runs out?
				}
			}*/
		//}
>>>>>>> .merge-right.r91
	}

	/**
	 * Method that returns the map of tiles
	 * */
	public Tile[][] getMap(){
		return this.map;
	}

	/**
<<<<<<< .working
	 * method that moves the area displayed on the screen. The player will
	 * always be in the middle of this area.
	 * Contains Game Logic:
	 * Cannot move through tree, water or wall.
	 *
	 * @param dir
	 *            the direction the player is being moved
=======
	 * method that moves the area displayed on the screen. The player will always be in the middle
	 * of this area.
	 * @param dir the direction the player is being moved
>>>>>>> .merge-right.r91
	 */
<<<<<<< .working
	public void move(Direction dir, int uid) {
		//Cannot move through tree, water or wall
		if (!checkTile(dir).getName().equals(tree)
				&& !checkTile(dir).getName().equals(water)
				&& !checkTile(dir).getName().equals(wall)){

			//Pick up key
			if (checkTile(dir).getName().equals(key)){
				players.get(uid).getInventory().add(checkTile(dir));
				players.get(uid).printInventory();
				//Key with grass
				replaceTile(dir);
			}
			//Move player
			players.get(uid).move(dir);
		}
	}

	public void rotate() {

=======
	public void move(Direction dir){
		if(transition != 0.0)return;
		transition = 0.5;
		direction = dir;
>>>>>>> .merge-right.r91
	}

	/**
<<<<<<< .working
	 * Used for game logic -
	 * Checks what the surrounding tile is given the direction, and returns it.
	 * Checks the tiles 1 space away from the player.
	 *
	 * Returns null if there are no tiles in the specified direction
	 *
	 * @param dir - Direction that the player will move
	 * @return	Item inside of the tile that is next to the player, given the direction,
	 * 			returns null if there are no tiles in that direction
=======
	 * Dont need to use this - for testing
	 * moves player 1 in the 2d array
	 * depending on direction given.
>>>>>>> .merge-right.r91
	 */
<<<<<<< .working
	public GameObject checkTile(Direction dir){
		//Find out where the player is in array
		setPlayerPositionFields();

		if (dir == Direction.DOWN && playerCol+1 < mapSize && playerCol +1 >=0){
			Tile tile = map[playerRow][playerCol+1];
			return tile.getItem();
		} else if (dir == Direction.UP && playerCol-1 < mapSize && playerCol -1 >=0){
			Tile tile = map[playerRow][playerCol-1];
			return tile.getItem();

		} else if (dir == Direction.RIGHT && playerRow+1 < mapSize && playerRow +1 >=0){
			Tile tile = map[playerRow+1][playerCol];
			return tile.getItem();

		} else if (dir == Direction.LEFT && playerRow-1 < mapSize && playerRow-1 >=0){
			Tile tile = map[playerRow-1][playerCol];
			return tile.getItem();
=======
	public void move(String direction){
		//NEED TO REPLACE ORIGINAL TILE AFTER MOVE
		if (direction.equals("right")){
			Player playerTile = (Player) map[playerRow][playerCol].getItem();
			System.out.println("right");
			map[playerRow][playerCol] = new Tile(new EnvironmentObject("sprites/grass.png", null), playerRow, playerCol);
			playerRow++;	//move down
			map[playerRow][playerCol] = new Tile(playerTile,playerRow,playerCol);
			players.get(0).setPos(map[playerRow][playerCol]);
		} 
		
		if (direction.equals("left")){
			Player playerTile = (Player) map[playerRow][playerCol].getItem();
			System.out.println("left");
			map[playerRow][playerCol] = new Tile(new EnvironmentObject("sprites/grass.png", null), playerRow, playerCol);
			playerRow--;	//move up
			map[playerRow][playerCol] = new Tile(playerTile,playerRow,playerCol);
			players.get(0).setPos(map[playerRow][playerCol]);
		} 
		
		if (direction.equals("up")){
			Player playerTile = (Player) map[playerRow][playerCol].getItem();
			System.out.println("up");
			map[playerRow][playerCol] = new Tile(new EnvironmentObject("sprites/grass.png", null), playerRow, playerCol);
			playerCol--;	//left
			map[playerRow][playerCol] = new Tile(playerTile,playerRow,playerCol);
			players.get(0).setPos(map[playerRow][playerCol]);
		} 
		
		if (direction.equals("down")){
			Player playerTile = (Player) map[playerRow][playerCol].getItem();
			System.out.println("down");
			map[playerRow][playerCol] = new Tile(new EnvironmentObject("sprites/grass.png", null), playerRow, playerCol);
			playerCol++;	//right
			map[playerRow][playerCol] = new Tile(playerTile,playerRow,playerCol);
			players.get(0).setPos(map[playerRow][playerCol]);
>>>>>>> .merge-right.r91
<<<<<<< .working
		}

		return null;
	}


	/**
	 * Replaces the tile in the map where the player will move to
	 * with a grass tile. (used for picking up items)
	 *
	 * @param dir - Direction that the player will move to
	 */
	public void replaceTile(Direction dir){

		System.out.println("BEFORE" + " row:" + playerRow + " col:" + playerCol);
		if (dir == Direction.DOWN && playerCol+1 < mapSize && playerCol +1 >=0){
			map[playerRow][playerCol+1].setItem(new EnvironmentObject("sprites/grass.png",grass));
		} else if (dir == Direction.UP && playerCol-1 < mapSize && playerCol -1 >=0){
			map[playerRow][playerCol-1].setItem(new EnvironmentObject("sprites/grass.png",grass));
		} else if (dir == Direction.RIGHT && playerRow+1 < mapSize && playerRow +1 >=0){
			map[playerRow+1][playerCol].setItem(new EnvironmentObject("sprites/grass.png",grass));
		} else if (dir == Direction.LEFT && playerRow-1 < mapSize && playerRow-1 >=0){
			map[playerRow-1][playerCol].setItem(new EnvironmentObject("sprites/grass.png",grass));
		}
=======
		} 
		
	}
	
	
	public void rotate(){
>>>>>>> .merge-right.r91

	}


	/**
	 * Adds a player to the game and returns a id
<<<<<<< .working
	 *
=======
>>>>>>> .merge-right.r91
	 * @return
	 */
<<<<<<< .working
	public int registerPlayer(int uid) {
		players.put(uid,new Player(new String[]{"sprites/slimes/slime.png","sprites/slimes/slime.png"},"test", false, 4,4));

		return uid;
=======
	public int registerPlayer() {
		// TODO Auto-generated method stub
		return 0;
>>>>>>> .merge-right.r91
	}

	private int clockTicks = 0;

	/**
	 * Called at each game iteration
	 */
	public void clockTick() {
<<<<<<< .working

		//Save world state every 10 seconds//
		if(clockTicks >= 500){
			StoreData.saveGameState(this);
			clockTicks = 0;
		}else{
			clockTicks++;
		}
		/////////END OF SAVE CODE////////////

		// System.out.println(transition);
		if (transition != 0) {
			if (direction == Direction.UP && yPos > 0)
				yPos--;
			if (direction == Direction.DOWN && yPos < map[0].length)
				yPos++;
			if (direction == Direction.LEFT && xPos > 0)
				xPos--;
			if (direction == Direction.RIGHT && xPos < map.length)
				xPos++;
=======
		//System.out.println(transition);
		if(transition != 0){
			if(direction == Direction.UP && yPos > 0) yPos--;
			if(direction == Direction.DOWN && yPos < map[0].length) yPos++;
			if(direction == Direction.LEFT && xPos > 0) xPos--;
			if(direction == Direction.RIGHT && xPos < map.length) xPos++;
>>>>>>> .merge-right.r91

		}if(players.size() > 0){
			players.get(0).clockTick();
		}
		//System.out.println(xPos + " " + yPos);

	}

	/**
	 * Returns the width of the world
<<<<<<< .working
	 *
=======
>>>>>>> .merge-right.r91
	 * @return
	 */
	public int width() {
		return mapSize;
	}

	/**
	 * Returns the height of the world
<<<<<<< .working
	 *
=======
>>>>>>> .merge-right.r91
	 * @return
	 */
	public int height() {
		return mapSize;
	}

	/**
	 * Returns the player with the matching id
<<<<<<< .working
	 *
=======
>>>>>>> .merge-right.r91
	 * @param uid
	 * @return
	 */
	public Player player(int uid) {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * Remove the player with the corresponding id from the game
<<<<<<< .working
	 *
=======
>>>>>>> .merge-right.r91
	 * @param uid
	 */
	public void disconnectPlayer(int uid) {
		// TODO Auto-generated method stub

	}

}
