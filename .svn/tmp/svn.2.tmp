package game;

import game.Player.Direction;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import util.ImageLibrary;

/**
 * Class that represents the world. Contains a 2d array of gameobjects,
 * in which could represent keys, doors etc. This class populates the world
 * and is responsible for redrawing it.
 *
 * @author Hai Tran
 *
 */
public class World {
	private int mapSize = 70;
	// Map containing all the tiles, which represent the world
	private Tile[][] map = new Tile[mapSize][mapSize];

	// the top left tile in the screen, so only the tiles on the screen are drawn.
	private int xPos;
	private int yPos;
	private Direction direction;
	private double transition;
	
	//Players in the game
	private ArrayList<Player> players = new ArrayList<Player>();

	//Player position

	public void fromByteArray(byte[] array) {

	}

	public World(){
		setUpWorld();
	}


	public World(String file) {
		// TODO Auto-generated constructor stub
	}

	public byte[] toByteArray() {
		return new byte[4];
	}



	/**
	 * Sets up the World and all the components in it, such as doors, rooms etc...
	 */
	public void setUpWorld(){
		transition = 0.0;
		for (int i =0; i < map.length; i++){
			for (int j =0; j < map[0].length; j++){
				map[i][j] = new Tile(new EnvironmentObject("sprites/grass.png",null), i, j);
			}
		}
		
		//add Players into world
		players.add(new Player("sprites/slimes/slime.png", "sprites/slimes/slime.png", false, 5,5));
		map[7][7] = new Tile(players.get(0),7,7);
		//into specific row and col in world
		//Get players position in array
		int playerRow = players.get(0).getPos().getRow();
		int playerCol = players.get(0).getPos().getCol();
		
		
		System.out.println(playerRow);
		System.out.println(playerCol);
	}


	public void redraw(Graphics g){
		//the size of the "game window"
		int screenWidth = 20;
		int screenHeight = 20;


		
		for (int i = 0; i < screenWidth; i++){
			for (int j = 0; j < screenHeight; j++){
				Tile tile = map[i][j];
				BufferedImage image = ImageLibrary.get(tile.getItem().getImage());
				int offset = image.getHeight() - Tile.tileSize;
				g.drawImage(image, tile.getPoint().x, tile.getPoint().y - offset, image.getWidth(), image.getHeight(), null);
			}
		}
		
		
	/*	for (int i = xPos; i < screenWidth; i++){
			for (int j = yPos; j < screenHeight; j++){
				//Draws all the tiles on the screen
				if(i < map.length && j < map.length){
					Tile tile = map[i][j];
					BufferedImage image = ImageLibrary.get(tile.getItem().getImage());
					int offset = image.getHeight() - Tile.tileSize;
					int transOffset = (int)(transition * Tile.tileSize);
					// increment correct values from transition
					if(transition == 0.0){
						g.drawImage(image, tile.getPoint().x, tile.getPoint().y - offset, image.getWidth(), image.getHeight(), null);
					} else if(direction == Direction.UP){
						g.drawImage(image, tile.getPoint().x, tile.getPoint().y - offset - transOffset, image.getWidth(), image.getHeight(), null);
						transition -= 0.5;
					} else if(direction == Direction.DOWN){
						g.drawImage(image, tile.getPoint().x, tile.getPoint().y - offset + transOffset, image.getWidth(), image.getHeight(), null);
						transition -= 0.5;
					} else if(direction == Direction.LEFT){
						g.drawImage(image, tile.getPoint().x + transOffset, tile.getPoint().y - offset, image.getWidth(), image.getHeight(), null);
						transition -= 0.5;
					} else if(direction == Direction.RIGHT){
						g.drawImage(image, tile.getPoint().x - transOffset, tile.getPoint().y - offset, image.getWidth(), image.getHeight(), null);
						transition -= 0.5;
					}
				} else {
					//TODO draw black where the map runs out?
				}
			}*/
		//}

		//HAVE TO draw over top of array in order to remove black background
		Tile tile = map[5][5];
		BufferedImage image = ImageLibrary.get("Menu/tree.png");
		int offset = image.getHeight() - Tile.tileSize;
		g.drawImage(image, tile.getPoint().x, tile.getPoint().y - offset, image.getWidth(), image.getHeight(), null);
	}

	/**
	 * Method that returns the map of tiles
	 * */
	public Tile[][] getMap(){
		return this.map;
	}

	/**
	 * method that moves the area displayed on the screen. The player will always be in the middle
	 * of this area.
	 * @param dir the direction the player is being moved
	 */
	public void move(Direction dir){
		if(transition != 0.0)return;
		transition = 0.5;
		direction = dir;
	}



	public void rotate(){

	}

	/**
	 * Adds a player to the game and returns a id
	 * @return
	 */
	public int registerPlayer() {
		// TODO Auto-generated method stub
		return 0;
	}

	/**
	 * Called at each game iteration
	 */
	public void clockTick() {
		//System.out.println(transition);
		if(transition != 0){
			if(direction == Direction.UP && yPos > 0) yPos--;
			if(direction == Direction.DOWN && yPos < map[0].length) yPos++;
			if(direction == Direction.LEFT && xPos > 0) xPos--;
			if(direction == Direction.RIGHT && xPos < map.length) xPos++;
			
		}
		//need to redraw after moving?
		//System.out.println(xPos + " " + yPos);

	}

	/**
	 * Returns the width of the world
	 * @return
	 */
	public int width() {
		// TODO Auto-generated method stub
		return 0;
	}

	/**
	 * Returns the height of the world
	 * @return
	 */
	public int height() {
		// TODO Auto-generated method stub
		return 0;
	}

	/**
	 * Returns the player with the matching id
	 * @param uid
	 * @return
	 */
	public Player player(int uid) {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * Remove the player with the corresponding id from the game
	 * @param uid
	 */
	public void disconnectPlayer(int uid) {
		// TODO Auto-generated method stub

	}
}
